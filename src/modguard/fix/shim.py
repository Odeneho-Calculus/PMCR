"""
Import hook implementation for resolving module namespace conflicts.
"""
import importlib
import importlib.machinery
import importlib.util
import sys
from importlib.abc import Loader, MetaPathFinder
from typing import Dict, List, Optional, Tuple, Union


class ShimLoader(Loader):
    """Loader that substitutes one module for another."""
    
    def __init__(self, target_module_name: str):
        """
        Initialize the shim loader.
        
        Args:
            target_module_name: The actual module that should be loaded
        """
        self.target_module_name = target_module_name
        self._target_module = None
    
    def create_module(self, spec):
        """Create a module by loading the target module."""
        if self._target_module is None:
            self._target_module = importlib.import_module(self.target_module_name)
        return self._target_module
    
    def exec_module(self, module):
        """No execution needed since we're using an existing module."""
        pass


class ShimFinder(MetaPathFinder):
    """
    A meta path finder that redirects imports from one module name to another.
    """
    
    def __init__(self, redirects: Dict[str, str]):
        """
        Initialize the shim finder.
        
        Args:
            redirects: A dictionary mapping original module names to their redirects
        """
        self.redirects = redirects
    
    def find_spec(self, fullname, path=None, target=None):
        """
        Find and redirect module specs for conflicting modules.
        
        Args:
            fullname: The full name of the module being imported
            path: The parent path of the module
            target: The module object that the finder is being requested to find
            
        Returns:
            A module spec for the redirected module or None
        """
        # Check if this is a module we want to redirect
        if fullname in self.redirects:
            target_name = self.redirects[fullname]
            
            # Create a loader that will load the target module
            loader = ShimLoader(target_name)
            
            # Create a spec using the original name but will load the target module
            return importlib.machinery.ModuleSpec(fullname, loader, is_package=False)
        
        return None


class ImportShimRegistry:
    """Registry for managing import shims."""
    
    _redirects: Dict[str, str] = {}
    _installed: bool = False
    
    @classmethod
    def add_redirect(cls, original_name: str, target_name: str) -> None:
        """
        Add a module redirect.
        
        Args:
            original_name: The original module name
            target_name: The module name to redirect to
        """
        cls._redirects[original_name] = target_name
        
        # Install the finder if not already installed
        if not cls._installed:
            cls._install_finder()
    
    @classmethod
    def remove_redirect(cls, original_name: str) -> None:
        """
        Remove a module redirect.
        
        Args:
            original_name: The original module name
        """
        if original_name in cls._redirects:
            del cls._redirects[original_name]
    
    @classmethod
    def get_redirects(cls) -> Dict[str, str]:
        """
        Get all current redirects.
        
        Returns:
            A dictionary mapping original module names to their redirects
        """
        return cls._redirects.copy()
    
    @classmethod
    def _install_finder(cls) -> None:
        """Install the import hook finder."""
        finder = ShimFinder(cls._redirects)
        sys.meta_path.insert(0, finder)
        cls._installed = True
    
    @classmethod
    def generate_shim_code(cls, original_name: str, target_name: str) -> str:
        """
        Generate code for a shim module.
        
        Args:
            original_name: The original module name
            target_name: The module name to redirect to
            
        Returns:
            Python code for a shim module
        """
        safe_original = original_name.replace(".", "_")
        safe_target = target_name.replace(".", "_")
        
        return f"""
# Generated by ModGuard - DO NOT EDIT
# This file implements an import hook to resolve namespace conflicts
# Original module: {original_name}
# Target module: {target_name}

import sys
from importlib.abc import MetaPathFinder, Loader
from importlib.util import spec_from_loader, module_from_spec
import importlib.machinery

class {safe_original}To{safe_target}ShimFinder(MetaPathFinder):
    def find_spec(self, fullname, path, target=None):
        # Only handle direct imports of the conflicting module
        if fullname == "{original_name}":
            # Redirect to the target module
            return self._create_spec("{target_name}")
        return None
        
    def _create_spec(self, redirect_name):
        # Load the actual module
        actual_module = importlib.import_module(redirect_name)
        
        # Create a loader that returns the actual module
        class ShimLoader(Loader):
            def create_module(self, spec):
                return actual_module
                
            def exec_module(self, module):
                pass
        
        # Create and return the spec
        return spec_from_loader("{original_name}", ShimLoader())

# Install the finder at the beginning of sys.meta_path
sys.meta_path.insert(0, {safe_original}To{safe_target}ShimFinder())
"""


def install_shims_from_config(config_file: str) -> None:
    """
    Install import shims from a configuration file.
    
    Args:
        config_file: Path to a configuration file containing redirect rules
    """
    import json
    
    try:
        with open(config_file, 'r') as f:
            config = json.load(f)
            
        if not isinstance(config, dict):
            print(f"Error: Invalid config format in {config_file}")
            return
            
        redirects = config.get('redirects', {})
        for original, target in redirects.items():
            ImportShimRegistry.add_redirect(original, target)
            
        print(f"Installed {len(redirects)} import shims from {config_file}")
        
    except Exception as e:
        print(f"Error loading shim configuration: {e}")